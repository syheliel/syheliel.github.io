<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Syheliel&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-10T06:12:56.629Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>syheliel</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A立方·2021华为计算AI安全冬令营 线上选拔赛</title>
    <link href="http://example.com/2021/01/10/A%E7%AB%8B%E6%96%B9%E5%86%AC%E4%BB%A4%E8%90%A5%E9%80%89%E6%8B%94%E8%B5%9BWriteup/"/>
    <id>http://example.com/2021/01/10/A%E7%AB%8B%E6%96%B9%E5%86%AC%E4%BB%A4%E8%90%A5%E9%80%89%E6%8B%94%E8%B5%9BWriteup/</id>
    <published>2021-01-10T05:47:39.000Z</published>
    <updated>2021-01-10T06:12:56.629Z</updated>
    
    <content type="html"><![CDATA[        <h1 id="CRYPTO"   >          <a href="#CRYPTO" class="heading-link"><i class="fas fa-link"></i></a>CRYPTO</h1>              <h2 id="RSA4"   >          <a href="#RSA4" class="heading-link"><i class="fas fa-link"></i></a>RSA4</h2>      <p>通过n,e,d求出p,q</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">d1&#x3D;0x7d12e57b1aa157038ebe5c45b56256270671e6984b0dcdf10a2ea07ce480143240c9a3e1c60870e499306a717073f157476aa88e99a7bdf1e2a4adf8ce21025cc6c05035c4a1d7e3b6f061464872e65118384999f0154f3c1761fa68d4685126b7fc98f4c2cdc41c98aa4e099a868a89099dd2170664647efca2c8d8e06a2e49</span><br><span class="line">e1&#x3D;0x10001</span><br><span class="line">n1&#x3D;0x96ed2727e4446e26c84552a9a19640c7d720c9b6e661cfcfec03463e92a9d0b228ddc9847c0daa137a19db67294626c535fe71c388f6ea3eb8cb5dbf09a84374eb021c9297a29394cf77da157c1b8be77b09a4fcbe54bf3dc93d33539e842766ad8e38369093ddc034ac32583a48e299a4d8b31b606b1729298ee136664b8b77</span><br><span class="line">c1&#x3D;0x6c435db37217bc4da3f225a8f1a0501e03a97d2cbc4fa249df051ed66c1559b68885f4fa181bdd9e98242441f463dbbc1c26d1eea2c5774a0a905b366c8775bce8e52182dc32a93647c9b8842b74abc434e5b84eeae679a3b19cb7a1ef6ae8f65d22ce6ab438a16119805eee83408a68207bbdfde5181a8bd8b4794c711d33c4</span><br><span class="line">msg1 &#x3D; long_to_bytes(pow(c1,d1,n1))</span><br><span class="line">print(msg1)</span><br><span class="line"></span><br><span class="line">def getpq(n,e,d):</span><br><span class="line">p &#x3D; 1</span><br><span class="line">q &#x3D; 1</span><br><span class="line">while p&#x3D;&#x3D;1 and q&#x3D;&#x3D;1:</span><br><span class="line">k &#x3D; d * e - 1</span><br><span class="line">g &#x3D; random.randint ( 0 , n )</span><br><span class="line">while p&#x3D;&#x3D;1 and q&#x3D;&#x3D;1 and k % 2 &#x3D;&#x3D; 0:</span><br><span class="line">k &#x2F;&#x2F;&#x3D; 2</span><br><span class="line">y &#x3D; pow(g,k,n)</span><br><span class="line">if y!&#x3D;1 and gcd(y-1,n)&gt;1:</span><br><span class="line">p &#x3D; gcd(y-1,n)</span><br><span class="line">q &#x3D; n&#x2F;&#x2F;p</span><br><span class="line">return p,q</span><br><span class="line">p,q &#x3D; getpq(n1,e1,d1)</span><br><span class="line">assert p*q &#x3D;&#x3D; n1</span><br><span class="line">e2&#x3D;0x3f1</span><br><span class="line">n2&#x3D;0x96ed2727e4446e26c84552a9a19640c7d720c9b6e661cfcfec03463e92a9d0b228ddc9847c0daa137a19db67294626c535fe71c388f6ea3eb8cb5dbf09a84374eb021c9297a29394cf77da157c1b8be77b09a4fcbe54bf3dc93d33539e842766ad8e38369093ddc034ac32583a48e299a4d8b31b606b1729298ee136664b8b77</span><br><span class="line">c2&#x3D;0x8cb5d8861e5838f41910d6eaf142a8d47b92e0c6b1b1e9e25896f7169644bbb726ccfdc82ba50932fbc45f00c53dda42f8efc358a5108cde8aaa9f38b493aa3417c9522924f06847ba4a3dd26f005a610f7633877fbe89e090df5cb3a7a5ebae0fbe72eabb339b21fa2ddd33844a5cb53e39491fc472721ed676ae07b33c8d6e</span><br><span class="line">phi &#x3D; (p-1)*(q-1)</span><br><span class="line">d2 &#x3D; invert(e2,phi)</span><br><span class="line">msg2 &#x3D; long_to_bytes(pow(c2,d2,n2))</span><br><span class="line">print(msg2)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="RSA14"   >          <a href="#RSA14" class="heading-link"><i class="fas fa-link"></i></a>RSA14</h2>      <p>已知明文高位，求m，思路是求解同余方程(m_bar+x)^3-c = 0( mod  N)，可用Sagemath计算：</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">n &#x3D; 0x8bc8479ebf10dc1a4c24d6dfd6effd0437969eebf67654bc5c495bf2577f15226c15b9793ce9363c5986c485c2932fc7e7e6daac8dc108cca6d1b3850353fa2f</span><br><span class="line">e &#x3D; 3</span><br><span class="line">c &#x3D; 0x87c05b7868cf54a58e19fe7a969a0213101f045e2afbf7547534564e918b62caa8187c773a8168ff464b20c28ce0e33383a600351883bb0938b2ecf0c45d59f3</span><br><span class="line">mbar &#x3D; 0x666c6167206973203a3739306666373532653338393838613532000000000000000000000000000000</span><br><span class="line">kbits &#x3D; 120</span><br><span class="line">beta &#x3D; 1</span><br><span class="line">nbits &#x3D; n.nbits()</span><br><span class="line">print(&quot;upper &#123;&#125; bits of &#123;&#125; bits is given&quot;.format(nbits - kbits, nbits))</span><br><span class="line">PR.&lt;x&gt; &#x3D; PolynomialRing(Zmod(n))</span><br><span class="line">f &#x3D; (mbar + x)^e - c</span><br><span class="line">x0 &#x3D; f.small_roots(X&#x3D;2^kbits, beta&#x3D;1)[0]  # find root &lt; 2^kbits with factor &#x3D; n</span><br><span class="line">print(&quot;m:&quot;, mbar + x0)</span><br></pre></td></tr></table></div></figure>        <h2 id="RSA-upgrade"   >          <a href="#RSA-upgrade" class="heading-link"><i class="fas fa-link"></i></a>RSA_upgrade</h2>      <p>首先求解LRG，思路是先求n，再求m和c。之后没做出，查看其他大佬的WP发现只要求解flag^e = m (mod p)即可，不需要管q和r</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">num &#x3D; [58605992502479537155943965904595921273, 525605798656979919420608964379033982804, 607738431135489138748992347244318940466, 631747898536603358381419028993140907216, 13450658701001781564543219325486287717, 407826262741495712819054543462943222370]</span><br><span class="line">p &#x3D; 138092450043978032187397495330379791355629274237204650898232878263413301988536751004632087169676028049236253598677819980191406826529664613957150122788435561338344715937422320958238628877093605040078776555586363593650646481242888908171897232624141894446324625781720275455534977357099473212936612966142541689717</span><br><span class="line">newN &#x3D; 3373500409784821814490131118443028295231446638918191872866826078664586857545499510115664725311697632345156866795088640886074708893049896293408277232121045205172588091316164743124173177747110069553394872128870505076277498830601152723565030932360665298864122468812389923295873644041292977470736981439616767671752225297169001703767163460419431015014012924743881828753765788455996503018031103917461875346904941302752301152097427368052588291798732671143344833211267818507324812463058368199324367285019651028003000765054679485233317767201747568717493732406861626561470103436488978595267326521876995116542475030869904228103019888619123275263009931569375612626796485751453790231029224398879558668919940829341599982045260085645733137064910612640851525128951165660322666651603943749615559507563880191545144231282875004494643666234781231448702811026047613232622993307630737999918058511598922102840862761604680588858313364100914751476403</span><br><span class="line">c &#x3D; 40522976224675404992818282038409183193065303107530049168092540620105120083552580372904554927069109321998620410524986748598618388761467715127564839742806614159382512978830563949967053562802375030363283879451081474764301602860367140250483857874335594802704634427276762179861996608105102610424633434334897307449739846880323406404392707133580686043181007091235341464802410874449708870610192494627811013526751435468963111672237058189288520084494533786573065843704621915085789731723587760910378534773137633519620193203450046994466154848079413319979993890764583887936777316159487010002407093187269512820453207591173395762513970799972839858119501585885277954258269483363133460240339866272358522431904252286259542327658731232568465990008278265227086114042064326334937705758042097987623388556184022737180944807660792992413039097516526454455063218161704505837882378018400687043158628503465274374703624257222504948612055237771581019005</span><br><span class="line"></span><br><span class="line">def decryptLCG(num:List[int]):</span><br><span class="line">    t &#x3D; []</span><br><span class="line">    for i in range(len(num)-1):</span><br><span class="line">        t.append(num[i+1] - num[i])</span><br><span class="line">    mult_n &#x3D; []</span><br><span class="line">    for i in range(len(t)-2):</span><br><span class="line">        mult_n.append(t[i]*t[i+2]-t[i+1]*t[i+1])</span><br><span class="line">    n &#x3D; mult_n[0]</span><br><span class="line">    for i in range(len(mult_n)):</span><br><span class="line">        n &#x3D; gcd(n,mult_n[i])</span><br><span class="line">    m &#x3D; ((num[1]-num[2])*invert(num[0]-num[1],n)) %n</span><br><span class="line">    c &#x3D; (num[1] - m*num[0])%n</span><br><span class="line">    seed &#x3D; (invert(m,n)*(num[0]-c)) % n</span><br><span class="line">    print(&quot;n&quot;,n,&quot;m&quot;,m,&quot;c&quot;,c,&quot;seed&quot;,seed)</span><br><span class="line">    return seed,(m,c,n)</span><br><span class="line"></span><br><span class="line">seed,params &#x3D; decryptLCG(num)</span><br><span class="line">key_stream &#x3D; lcg(seed,params)</span><br><span class="line">num&#x3D;[]</span><br><span class="line">for _ in range(6):</span><br><span class="line">num.append(next(key_stream))</span><br><span class="line">print(num)</span><br><span class="line">secret &#x3D;  next(key_stream)</span><br><span class="line">e &#x3D; nextprime(secret)</span><br></pre></td></tr></table></div></figure>        <h2 id="MEET"   >          <a href="#MEET" class="heading-link"><i class="fas fa-link"></i></a>MEET</h2>      <p>RSA的中间相遇攻击，由于k1,k2的枚举空间都是2^16(生成密钥的过程为取8个比特，前4个比特给k1，后4个比特给k2，之后将k1，k2分别重复一遍以拓展到8比特)，所以可以暴力搜索</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"># py2</span><br><span class="line">from Crypto.Cipher import DES</span><br><span class="line">import random</span><br><span class="line">import base64</span><br><span class="line">from binascii import hexlify</span><br><span class="line">from itertools import *</span><br><span class="line">from typing import *</span><br><span class="line">from tqdm import tqdm</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line"># from secret import flag</span><br><span class="line">flag&#x3D;b&quot;noflag22&quot;</span><br><span class="line">class keyPair:</span><br><span class="line">    k1 &#x3D; None</span><br><span class="line">    k2 &#x3D; None</span><br><span class="line">    def __init__(self,k1,k2):</span><br><span class="line">        self.k1 &#x3D; k1</span><br><span class="line">        self.k2 &#x3D; k2</span><br><span class="line">class _2DES:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def Get_key(self):</span><br><span class="line">        k1&#x3D;&quot;&quot;.join([random.choice(&#39;0123456789abcdef&#39;) for i in range(8)])</span><br><span class="line">        return (k1[:4]*2,k1[4:]*2)</span><br><span class="line"></span><br><span class="line">    def Enc(self,msg,key1,key2):</span><br><span class="line">        k1,k2&#x3D;key1,key2</span><br><span class="line">        e1&#x3D;DES.new(k1.encode(),DES.MODE_CBC,bytes(8))</span><br><span class="line">        e2&#x3D;DES.new(k2.encode(),DES.MODE_CBC,bytes(8))</span><br><span class="line">        c&#x3D;e2.decrypt(e1.encrypt(msg)) # m -&gt;(11_enc) m&#39; -&gt;(k2_dec) c</span><br><span class="line">        return base64.b64encode(c)</span><br><span class="line"></span><br><span class="line">    def Dec(self,cipher,key1,key2):</span><br><span class="line">        k1,k2&#x3D;key1,key2</span><br><span class="line">        e1&#x3D;DES.new(k1.encode(),DES.MODE_CBC,bytes(8))</span><br><span class="line">        e2&#x3D;DES.new(k2.encode(),DES.MODE_CBC,bytes(8))</span><br><span class="line">        c&#x3D;e1.decrypt(e2.encrypt(cipher)) # m -&gt;(11_enc) m&#39; -&gt;(k2_dec) c</span><br><span class="line">        return base64.b64encode(c)</span><br><span class="line"></span><br><span class="line">def meetAttack(plaintext:bytes,ciphertext:bytes):</span><br><span class="line">    # process: m -&gt;(k1_enc) m&#39;   |||   c -&gt; (k2_enc) m&#39;</span><br><span class="line">    midTable:Dict[bytes,keyPair] &#x3D; &#123;&#125; # record m&#39;-&gt; k1</span><br><span class="line">    for key in tqdm(product([&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;],repeat&#x3D;4)):</span><br><span class="line">        key:str &#x3D; &#39;&#39;.join(key)</span><br><span class="line">        key &#x3D; key + key</span><br><span class="line">        e1 &#x3D; DES.new(key.encode(),DES.MODE_CBC,bytes(8))</span><br><span class="line">        mid1 &#x3D; e1.encrypt(plaintext)</span><br><span class="line">        if midTable.get(mid1) !&#x3D;  None and midTable.get(mid1).k2 !&#x3D; None:</span><br><span class="line">            pair &#x3D; midTable.get(mid1)</span><br><span class="line">            print(&quot;found&quot;,key.encode(),pair.k2)</span><br><span class="line">            e&#x3D; DES.new(pair.k2,DES.MODE_CBC,bytes(8))</span><br><span class="line">            print(mid1,e.encrypt(ciphertext))</span><br><span class="line">        midTable[mid1] &#x3D; keyPair(key.encode(),None)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        e2 &#x3D; DES.new(key.encode(), DES.MODE_CBC, bytes(8))</span><br><span class="line">        mid2 &#x3D; e2.encrypt(ciphertext)</span><br><span class="line"></span><br><span class="line">        if midTable.get(mid2) !&#x3D;  None and midTable.get(mid2).k1 !&#x3D; None:</span><br><span class="line">            pair &#x3D; midTable.get(mid2)</span><br><span class="line">            print(&quot;found&quot;,pair.k1,key)</span><br><span class="line">        midTable[mid2] &#x3D; keyPair(None,key.encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    _2des&#x3D;_2DES()</span><br><span class="line">    # k1,k2&#x3D;_2des.Get_key()</span><br><span class="line">    k1 &#x3D; &#39;c1c7c1c7&#39;</span><br><span class="line">    k2 &#x3D; &#39;ca62ca62&#39;</span><br><span class="line">    # print(k1,k2)</span><br><span class="line">    c&#x3D;_2des.Enc(b&#39;12345678&#39;,k1,k2)</span><br><span class="line">    print(c)</span><br><span class="line">    c &#x3D; _2des.Dec(base64.b64decode(&quot;qMMGe3wORmFJePnQnM2ZeA&#x3D;&#x3D;&quot;),k1,k2)</span><br><span class="line">    print(c)</span><br><span class="line">    print((base64.b64decode(c)))</span><br><span class="line">    # meetAttack(b&#39;12345678&#39;,base64.b64decode(&#39;D4meWwYAUE4&#x3D;&#39;.encode()))</span><br><span class="line"></span><br><span class="line">#b&#39;D4meWwYAUE4&#x3D;&#39;</span><br><span class="line">#b&#39;qMMGe3wORmFJePnQnM2ZeA&#x3D;&#x3D;&#39;</span><br></pre></td></tr></table></div></figure>]]></content>
    
    
      
      
    <summary type="html">
        &lt;h1 id=&quot;CRYPTO&quot;   &gt;
          &lt;a href=&quot;#CRYPTO&quot; class=&quot;heading-link&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/a&gt;CRYPTO&lt;/h1&gt;
      
        &lt;h2 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/01/10/hello-world/"/>
    <id>http://example.com/2021/01/10/hello-world/</id>
    <published>2021-01-10T04:32:33.270Z</published>
    <updated>2021-01-10T04:32:33.270Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>        <h2 id="Quick-Start"   >          <a href="#Quick-Start" class="heading-link"><i class="undefined"></i></a>Quick Start</h2>              <h3 id="Create-a-new-post"   >          <a href="#Create-a-new-post" class="heading-link"><i class="undefined"></i></a>Create a new post</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></div></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>        <h3 id="Run-server"   >          <a href="#Run-server" class="heading-link"><i class="undefined"></i></a>Run server</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></div></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>        <h3 id="Generate-static-files"   >          <a href="#Generate-static-files" class="heading-link"><i class="undefined"></i></a>Generate static files</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></div></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>        <h3 id="Deploy-to-remote-sites"   >          <a href="#Deploy-to-remote-sites" class="heading-link"><i class="undefined"></i></a>Deploy to remote sites</h3>      <figure class="highlight bash"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></div></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
